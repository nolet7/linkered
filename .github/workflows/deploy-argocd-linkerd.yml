name: Deploy Linkerd via Argo CD

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment to deploy
        default: dev
        options: [dev, staging, prod]
  push:
    branches: [ master ]
    paths:
      - 'argocd/**'
      - 'helm-values/**'
      - '.github/workflows/deploy-argocd-linkerd.yml'

env:
  PROJECT_ID: idp-0903
  GKE_CLUSTER: lowcost-gke-ondemand
  GKE_ZONE: us-central1-a
  DEFAULT_BRANCH: master

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # gcloud + auth
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 475.0.0'

      - name: Auth with service account
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install GKE auth plugin
        run: gcloud components install gke-gcloud-auth-plugin -q

      - name: Get GKE credentials
        run: |
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE" --project "$PROJECT_ID"

      # ---------- DEV: generate certs and write values file ----------
      - name: Generate DEV identity certs and write values
        if: ${{ (github.event.inputs.environment || 'dev') == 'dev' }}
        run: |
          mkdir -p /tmp/linkerd-dev
          # Trust anchor (self-signed)
          openssl req -x509 -newkey rsa:4096 -days 3650 -nodes \
            -keyout /tmp/linkerd-dev/ca.key -out /tmp/linkerd-dev/trust-anchor.crt \
            -subj "/CN=linkerd-trust-anchor.dev"
          # Issuer signed by trust anchor
          openssl req -new -newkey rsa:4096 -nodes \
            -keyout /tmp/linkerd-dev/issuer.key -out /tmp/linkerd-dev/issuer.csr \
            -subj "/CN=linkerd-identity-issuer.dev"
          openssl x509 -req -in /tmp/linkerd-dev/issuer.csr \
            -CA /tmp/linkerd-dev/trust-anchor.crt -CAkey /tmp/linkerd-dev/ca.key -CAcreateserial \
            -out /tmp/linkerd-dev/issuer.crt -days 3650

          mkdir -p helm-values/dev
          {
            printf "%s\n" "installNamespace: false"
            printf "%s\n" "controllerReplicas: 1"
            printf "%s\n" "proxy:"
            printf "%s\n" "  resources:"
            printf "%s\n" "    requests: { cpu: 20m, memory: 64Mi }"
            printf "%s\n" "    limits:   { cpu: 200m, memory: 256Mi }"
            printf "%s\n" ""
            printf "%s\n" "identityTrustAnchorsPEM: |"
            sed 's/^/  /' /tmp/linkerd-dev/trust-anchor.crt
            printf "%s\n" "identity:"
            printf "%s\n" "  issuer:"
            printf "%s\n" "    scheme: kubernetes.io/tls"
            printf "%s\n" "    tls:"
            printf "%s\n" "      crtPEM: |"
            sed 's/^/        /' /tmp/linkerd-dev/issuer.crt
            printf "%s\n" "      keyPEM: |"
            sed 's/^/        /' /tmp/linkerd-dev/issuer.key
          } > helm-values/dev/control-plane-values.yaml

      - name: Commit dev values change (if any)
        if: ${{ (github.event.inputs.environment || 'dev') == 'dev' }}
        run: |
          if ! git diff --quiet -- helm-values/dev/control-plane-values.yaml; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add helm-values/dev/control-plane-values.yaml
            git commit -m "ci(dev): generate Linkerd identity certs and values"
            git push origin "$DEFAULT_BRANCH"
          fi

      # ---------- Apply Argo CD objects ----------
      - name: Apply Argo CD Project & Apps (dev scaffolds)
        run: |
          kubectl apply -f argocd/project-platform-tools.yaml
          kubectl apply -f argocd/apps/linkerd-crds-dev.yaml
          kubectl apply -f argocd/apps/linkerd-control-plane-dev.yaml
          kubectl apply -f argocd/apps/linkerd-viz-dev.yaml

      # ---------- STAGING/PROD: create Apps with inline secrets ----------
      - name: Create STAGING/PROD Apps with inline PEMs
        if: ${{ (github.event.inputs.environment || 'dev') != 'dev' }}
        env:
          ENV: ${{ github.event.inputs.environment }}
          STAGING_TA:   ${{ secrets.LINKERD_STAGING_TRUST_ANCHOR_PEM }}
          STAGING_CERT: ${{ secrets.LINKERD_STAGING_ISSUER_CERT_PEM }}
          STAGING_KEY:  ${{ secrets.LINKERD_STAGING_ISSUER_KEY_PEM }}
          PROD_TA:      ${{ secrets.LINKERD_PROD_TRUST_ANCHOR_PEM }}
          PROD_CERT:    ${{ secrets.LINKERD_PROD_ISSUER_CERT_PEM }}
          PROD_KEY:     ${{ secrets.LINKERD_PROD_ISSUER_KEY_PEM }}
        run: |
          case "$ENV" in
            staging) TRUST_ANCHOR="$STAGING_TA"; ISSUER_CERT="$STAGING_CERT"; ISSUER_KEY="$STAGING_KEY" ;;
            prod)    TRUST_ANCHOR="$PROD_TA";    ISSUER_CERT="$PROD_CERT";    ISSUER_KEY="$PROD_KEY"    ;;
            *) echo "ENV must be staging or prod"; exit 1 ;;
          esac
          if [ -z "$TRUST_ANCHOR" ] || [ -z "$ISSUER_CERT" ] || [ -z "$ISSUER_KEY" ]; then
            echo "Missing secrets for $ENV"; exit 1
          fi

          # CRDs
          cat > /tmp/linkerd-crds-${ENV}.yaml <<'APP'
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: linkerd-crds-__ENV__
            namespace: argocd
          spec:
            project: platform-tools
            source:
              repoURL: https://helm.linkerd.io/stable
              chart: linkerd-crds
              targetRevision: "*"
            destination:
              server: https://kubernetes.default.svc
              namespace: linkerd
            syncPolicy:
              automated: { selfHeal: true, prune: true }
              syncOptions: [ CreateNamespace=true ]
          APP
          sed -i "s/__ENV__/$ENV/g" /tmp/linkerd-crds-${ENV}.yaml
          kubectl apply -f /tmp/linkerd-crds-${ENV}.yaml

          # Control plane
          cat > /tmp/linkerd-control-plane-${ENV}.yaml <<APP
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: linkerd-control-plane-${ENV}
            namespace: argocd
          spec:
            project: platform-tools
            sources:
              - repoURL: https://github.com/nolet7/linkered
                targetRevision: ${DEFAULT_BRANCH}
                path: argocd/rbac
              - repoURL: https://helm.linkerd.io/stable
                chart: linkerd-control-plane
                targetRevision: "*"
                helm:
                  values: |
                    installNamespace: false
                    controllerReplicas: $([ "$ENV" = "prod" ] && echo 3 || echo 2)
                    identity:
                      externalCA: false
                      issuer:
                        scheme: kubernetes.io/tls
                        tls:
                          crtPEM: |
          $(echo "$ISSUER_CERT" | sed 's/^/                            /')
                          keyPEM: |
          $(echo "$ISSUER_KEY" | sed 's/^/                            /')
                    identityTrustAnchorsPEM: |
          $(echo "$TRUST_ANCHOR" | sed 's/^/                    /')
                    proxy:
                      resources:
                        requests: { cpu: 50m, memory: 128Mi }
                        limits:   { cpu: 500m, memory: 512Mi }
            destination:
              server: https://kubernetes.default.svc
              namespace: linkerd
            syncPolicy:
              automated: { selfHeal: true, prune: true }
              syncOptions: [ CreateNamespace=true ]
            ignoreDifferences:
              - group: admissionregistration.k8s.io
                kind: MutatingWebhookConfiguration
                jqPathExpressions: [ '.webhooks[]?.clientConfig.caBundle' ]
          APP
          kubectl apply -f /tmp/linkerd-control-plane-${ENV}.yaml

          # Viz
          cat > /tmp/linkerd-viz-${ENV}.yaml <<'APP'
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: linkerd-viz-__ENV__
            namespace: argocd
          spec:
            project: platform-tools
            source:
              repoURL: https://helm.linkerd.io/stable
              chart: linkerd-viz
              targetRevision: "*"
              helm:
                values: |
                  installNamespace: false
            destination:
              server: https://kubernetes.default.svc
            namespace: linkerd-viz
            syncPolicy:
              automated: { selfHeal: true, prune: true }
              syncOptions: [ CreateNamespace=true ]
          APP
          sed -i "s/__ENV__/$ENV/g" /tmp/linkerd-viz-${ENV}.yaml
          kubectl apply -f /tmp/linkerd-viz-${ENV}.yaml

      # ---------- Add sync waves + autosync; then trigger syncs ----------
      - name: Set sync waves and autosync on Apps
        run: |
          set -e
          apps=(linkerd-crds-dev linkerd-control-plane-dev linkerd-viz-dev)
          # If this is staging/prod run, patch those names instead
          if [ "${{ github.event.inputs.environment || 'dev' }}" != "dev" ]; then
            apps=(linkerd-crds-${{ github.event.inputs.environment }} linkerd-control-plane-${{ github.event.inputs.environment }} linkerd-viz-${{ github.event.inputs.environment }})
          fi

          # Waves: CRDs=-1, control-plane=0, viz=+1
          kubectl -n argocd patch application "${apps[0]}" --type merge -p '{"metadata":{"annotations":{"argocd.argoproj.io/sync-wave":"-1"}}}'
          kubectl -n argocd patch application "${apps[1]}" --type merge -p '{"metadata":{"annotations":{"argocd.argoproj.io/sync-wave":"0"}}}'
          kubectl -n argocd patch application "${apps[2]}" --type merge -p '{"metadata":{"annotations":{"argocd.argoproj.io/sync-wave":"+1"}}}'

          # Ensure auto-sync
          for a in "${apps[@]}"; do
            kubectl -n argocd patch application "$a" --type merge -p \
              '{"spec":{"syncPolicy":{"automated":{"selfHeal":true,"prune":true},"syncOptions":["CreateNamespace=true"]}}}'
          done

          # Trigger syncs
          for a in "${apps[@]}"; do
            kubectl -n argocd patch application "$a" --type merge -p '{"operation":{"sync":{}}}'
          done

      # ---------- Wait until Linkerd is ready ----------
      - name: Wait for Linkerd control plane to be Available
        run: |
          # Wait for deployments in linkerd ns (best-effort, ignore if ns isn't there yet)
          kubectl get ns linkerd >/dev/null 2>&1 || { echo "linkerd namespace not created yet"; exit 0; }
          kubectl -n linkerd get deploy -o name | xargs -r -I{} kubectl -n linkerd wait --for=condition=available --timeout=10m {}

      - name: Wait for Linkerd Viz (optional)
        run: |
          kubectl get ns linkerd-viz >/dev/null 2>&1 || { echo "linkerd-viz namespace not created yet"; exit 0; }
          kubectl -n linkerd-viz get deploy -o name | xargs -r -I{} kubectl -n linkerd-viz wait --for=condition=available --timeout=10m {}

      - name: Show status
        run: |
          echo "== Argo CD Applications =="
          kubectl -n argocd get applications
          echo "== Linkerd =="
          kubectl -n linkerd get deploy,po -o wide || true
          echo "== Linkerd Viz =="
          kubectl -n linkerd-viz get deploy,po -o wide || true

