name: Deploy Linkerd via Argo CD

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment to deploy
        default: dev
        options: [dev, staging, prod]
  push:
    branches: [ master ]
    paths:
      - 'argocd/**'
      - 'helm-values/**'
      - '.github/workflows/deploy-argocd-linkerd.yml'

env:
  PROJECT_ID: idp-0903
  GKE_CLUSTER: lowcost-gke-ondemand
  GKE_ZONE: us-central1-a
  DEFAULT_BRANCH: master
  REPO_SLUG: nolet7/linkered

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- gcloud + auth ---
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 475.0.0'

      - name: Auth with service account
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install GKE auth plugin
        run: gcloud components install gke-gcloud-auth-plugin -q

      - name: Get GKE credentials
        run: |
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> "$GITHUB_ENV"
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE" --project "$PROJECT_ID"

      - name: Select ENV (dev if push)
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.environment }}" ]; then
            echo "ENV=${{ github.event.inputs.environment }}" >> "$GITHUB_ENV"
          else
            echo "ENV=dev" >> "$GITHUB_ENV"
          fi
          echo "Selected ENV=$ENV"

      # --- AppProject + SealedSecrets (from repo files) ---
      - name: Apply AppProject and SealedSecrets Application
        shell: bash
        run: |
          set -euo pipefail
          kubectl apply -f argocd/project-platform-tools.yaml
          kubectl apply -f argocd/apps/sealed-secrets.yaml

      - name: Wait for SealedSecrets app, namespace, and rollout
        shell: bash
        run: |
          set -euo pipefail

          echo "Waiting for Argo CD Application sealed-secrets to be Synced & Healthy..."
          for i in {1..60}; do
            SYNC=$(kubectl -n argocd get app sealed-secrets -o jsonpath='{.status.sync.status}' 2>/dev/null || true)
            HEALTH=$(kubectl -n argocd get app sealed-secrets -o jsonpath='{.status.health.status}' 2>/dev/null || true)
            echo "  attempt=$i sync=${SYNC:-<none>} health=${HEALTH:-<none>}"
            if [ "$SYNC" = "Synced" ] && [ "$HEALTH" = "Healthy" ]; then
              echo "sealed-secrets Application is Synced & Healthy."; break
            fi
            sleep 5
            [ "$i" -eq 60 ] && echo "Timed out waiting for sealed-secrets Application" && exit 1
          done

          echo "Waiting for namespace sealed-secrets to exist..."
          for i in {1..60}; do
            kubectl get ns sealed-secrets >/dev/null 2>&1 && break
            sleep 2
            [ "$i" -eq 60 ] && echo "Timed out waiting for namespace sealed-secrets" && exit 1
          done

          kubectl -n sealed-secrets rollout status deploy/sealed-secrets --timeout=5m

      # --- Linkerd Apps (use repo files in argocd/apps) ---
      - name: Apply Linkerd Applications (CRDs, Control-Plane, Viz)
        shell: bash
        run: |
          set -euo pipefail
          kubectl apply -f "argocd/apps/linkerd-crds-${ENV}.yaml"
          kubectl apply -f "argocd/apps/linkerd-control-plane-${ENV}.yaml"
          kubectl apply -f "argocd/apps/linkerd-viz-${ENV}.yaml"

      - name: Ensure autosync, set sync waves, and trigger syncs
        shell: bash
        run: |
          set -euo pipefail
          apps=("linkerd-crds-${ENV}" "linkerd-control-plane-${ENV}" "linkerd-viz-${ENV}")

          # Set waves: CRDs=-2, control-plane=0, viz=+1
          kubectl -n argocd patch application "${apps[0]}" --type merge -p '{"metadata":{"annotations":{"argocd.argoproj.io/sync-wave":"-2"}}}' || true
          kubectl -n argocd patch application "${apps[1]}" --type merge -p '{"metadata":{"annotations":{"argocd.argoproj.io/sync-wave":"0"}}}' || true
          kubectl -n argocd patch application "${apps[2]}" --type merge -p '{"metadata":{"annotations":{"argocd.argoproj.io/sync-wave":"+1"}}}' || true

          for a in "${apps[@]}"; do
            kubectl -n argocd patch application "$a" --type merge -p \
              '{"spec":{"syncPolicy":{"automated":{"selfHeal":true,"prune":true},"syncOptions":["CreateNamespace=true"]}}}' || true
            # trigger sync
            kubectl -n argocd patch application "$a" --type merge -p '{"operation":{"sync":{}}}' || true
          done

      - name: Wait for Linkerd control plane to be Available
        shell: bash
        run: |
          set -euo pipefail
          NS=linkerd

          echo "Waiting for namespace ${NS}..."
          for i in {1..60}; do
            kubectl get ns "${NS}" >/dev/null 2>&1 && break
            sleep 2
            [ "$i" -eq 60 ] && echo "Timed out waiting for namespace ${NS}" && exit 1
          done

          echo "Waiting for deployments to appear in ${NS}..."
          for i in {1..60}; do
            COUNT=$(kubectl -n "${NS}" get deploy --no-headers 2>/dev/null | wc -l || echo 0)
            [ "${COUNT}" -gt 0 ] && break
            sleep 5
            [ "$i" -eq 60 ] && echo "Timed out waiting for deployments in ${NS}" && exit 1
          done

          echo "Waiting for all deployments in ${NS} to be Available..."
          kubectl -n "${NS}" wait --for=condition=available --timeout=10m deploy --all

      - name: Wait for Linkerd Viz (optional)
        shell: bash
        run: |
          set -euo pipefail
          NS=linkerd-viz

          if ! kubectl get ns "${NS}" >/dev/null 2>&1; then
            echo "Namespace ${NS} not created yet (skipping)."
            exit 0
          fi

          echo "Waiting for deployments to appear in ${NS}..."
          for i in {1..60}; do
            COUNT=$(kubectl -n "${NS}" get deploy --no-headers 2>/dev/null | wc -l || echo 0)
            [ "${COUNT}" -gt 0 ] && break
            sleep 5
            [ "$i" -eq 60 ] && echo "Timed out waiting for deployments in ${NS}" && exit 1
          done

          echo "Waiting for all deployments in ${NS} to be Available..."
          kubectl -n "${NS}" wait --for=condition=available --timeout=10m deploy --all

      - name: Show status
        shell: bash
        run: |
          echo "== Argo CD Applications =="
          kubectl -n argocd get applications
          echo "== Linkerd =="
          kubectl -n linkerd get deploy,po -o wide || true
          echo "== Linkerd Viz =="
          kubectl -n linkerd-viz get deploy,po -o wide || true
